/*
COVID-19 Data Exploration 

Skills Highlighted: Joins, CTEs, Temp Tables, Windows Functions, Aggregate Functions, Creating Views

These queries were written and executed in BigQuery (Google Cloud Platform) and could not 
be exported directly to my GitHub repository, so I've simply copied and pasted it for now.
*/

SELECT * 
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  order by 3,4



-- Select starting data 

SELECT location, date, total_cases, new_cases, total_deaths, population
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  order by 1, 2




-- Looking at Total Cases vs Total Deaths in order to determine probability of dying from COVID-19 in your country

SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as probability_of_death
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  order by 1, 2



-- Examine Total Cases vs Population to show what percentage of a country's population got Covid

SELECT location, date, total_cases, population, (total_cases/population)*100 as percent_infected
  FROM  `portfolio88.covid.covid_deaths`
  WHERE location = 'United States' and continent is not null 
  order by 1, 2



-- Looking at countries with the highest infection rates

SELECT location, population, MAX(total_cases) as HighestInfectionCount, MAX((total_cases/population))*100 as highest_infection_percentage
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  group by location, population
  order by highest_infection_percentage desc



-- Show the countries with the highest death counts per population

SELECT location, MAX(total_deaths) as total_death_count
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  group by location
  order by total_death_count desc



-- Show the continents with the highest death counts per population

SELECT location, MAX(total_deaths) as total_death_count
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is null 
  group by location
  order by total_death_count desc



-- Show the global probability of death by removing "location", and grouping by "date" instead

SELECT date, sum(new_cases) as total_cases, sum(new_deaths) as total_deaths, 
(sum(new_deaths)/sum(new_cases))*100 as global_probability_of_death
  FROM  `portfolio88.covid.covid_deaths`
  WHERE continent is not null 
  group by date
  order by 1, 2



-- Join Covid Deaths table with Covid Vaccinations table

SELECT *
  FROM `portfolio88.covid.covid_deaths` as deaths
  JOIN `portfolio88.covid.covid_vaccinations` as vaccs
      On deaths.location = vaccs.location
      and deaths.date = vaccs.date



-- Look at the rolling count total population vs total vaccinations

SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccs.new_vaccinations, 
(sum(vaccs.new_vaccinations) OVER (PARTITION BY deaths.location Order by deaths.location, deaths.date)) as vaccinated_rolling_count
  FROM `portfolio88.covid.covid_deaths` as deaths
  JOIN `portfolio88.covid.covid_vaccinations` as vaccs
      On deaths.location = vaccs.location
      and deaths.date = vaccs.date
  WHERE deaths.continent is not null
  order by 2,3



-- Using a CTE to perform calculation on the partition we just created in the previous query
-- Compare the rolling count of vaccinated people vs total population, express as a percenter. 

WITH PopvsVac as
(
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccs.new_vaccinations, 
(sum(vaccs.new_vaccinations) OVER (PARTITION BY deaths.location Order by deaths.location, deaths.date)) as vaccinated_rolling_count 
  FROM `portfolio88.covid.covid_deaths` as deaths
  JOIN `portfolio88.covid.covid_vaccinations` as vaccs
      On deaths.location = vaccs.location
      and deaths.date = vaccs.date
  WHERE deaths.continent is not null
)
SELECT *, (vaccinated_rolling_count/population)*100 as percent_vaccinated_rolling_count
FROM PopvsVac



-- Create a temp table to perform calculations on previous partition
-- Demonstrates the use of temp tables

DROP TABLE IF EXISTS portfolio88.covid.Percent_Vaccinated; -- Used to drop previous table if running this same query multiple times
CREATE TABLE portfolio88.covid.Percent_Vaccinated
(
Continent string,
Location string,
Date datetime,
Population numeric,
New_vaccinations numeric,
Vaccinated_rolling_count numeric);

INSERT INTO portfolio88.covid.Percent_Vaccinated
(
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccs.new_vaccinations, 
(sum(vaccs.new_vaccinations) OVER (PARTITION BY deaths.location Order by deaths.location, deaths.date)) as vaccinated_rolling_count 
  FROM `portfolio88.covid.covid_deaths` as deaths
  JOIN `portfolio88.covid.covid_vaccinations` as vaccs
      On deaths.location = vaccs.location
      and deaths.date = vaccs.date
  WHERE deaths.continent is not null
);

SELECT *, (vaccinated_rolling_count/population)*100 as percent_vaccinated_rolling_count
FROM portfolio88.covid.Percent_Vaccinated
WHERE location = "United States" -- Use this to narrow down data for US and check the math for accuracy. 
Order by 1, 2, 3



-- Creating View to store data for use in Tableau viz

CREATE VIEW portfolio88.covid.Percent_Vaccinated_View as
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccs.new_vaccinations, 
(sum(vaccs.new_vaccinations) OVER (PARTITION BY deaths.location Order by deaths.location, deaths.date)) as vaccinated_rolling_count 
  FROM `portfolio88.covid.covid_deaths` as deaths
  JOIN `portfolio88.covid.covid_vaccinations` as vaccs
      On deaths.location = vaccs.location
      and deaths.date = vaccs.date
  WHERE deaths.continent is not null
